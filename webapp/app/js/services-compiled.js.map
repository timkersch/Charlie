{"version":3,"sources":["services.js"],"names":[],"mappings":"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","file":"services-compiled.js","sourcesContent":["'use strict';\n\nconst charlieService = angular.module('charlieService', []);\n\ncharlieService.factory('charlieProxy', ['$rootScope',\n    function ($rootScope) {\n        const socket = io('ws://localhost:8080/');\n\n        let requestId = 0;\n        const getRequestId = function () {\n            return requestId++;\n        };\n        let isReady = false;\n        let callbacks = {};\n        let listenCallbacks = {};\n        let readyCallbacks = [];\n        let user = {};\n        let currentQuiz;\n\n        socket.on('connect', function(){\n            console.log(\"socketio open!\");\n            if (sessionStorage.user) {\n                // User in storage\n                user = sessionStorage.user;\n                let data = {\n                    id: user.id\n                };\n                invoke(\"setUser\", data, function (success) {\n                    if (!success) {\n                        sessionStorage.user = \"\";\n                        setReady();\n                    } else {\n                        invoke(\"getQuiz\", {}, function (quiz) {\n                            currentQuiz = quiz;\n                            setReady();\n                        });\n                    }\n                });\n            } else {\n                setReady();\n            }\n        });\n\n        socket.on('disconnect', function(){\n            console.log(\"socketio close!\");\n        });\n\n        socket.on('callback', function (event) {\n            console.log(\"Callback event(%o)\", event);\n            const action = event.action;\n            const data = event.data;\n            const id = event.request_id;\n            const callback = callbacks[id];\n            delete callbacks[id];\n            callback(data);\n            $rootScope.$apply();\n        });\n\n        socket.on('listen', function (event) {\n            console.log(\"ListenEvent(%o)\", event);\n            const action = event.action;\n            const data = event.data;\n            if (Array.isArray(listenCallbacks[action])) {\n                for (let i = 0; i < listenCallbacks[action].length; i++) {\n                    listenCallbacks[action][i](data);\n                }\n            }\n        });\n\n        let invoke = function (name, data, callback) {\n            console.log(\"Invoke(\" + name + \"), data: \" + JSON.stringify(data));\n            let request = {\n                request_id: getRequestId(),\n                data: data\n            };\n            callbacks[request.request_id] = callback;\n            socket.emit(name, request);\n        };\n\n        let setReady = function () {\n            console.log(\"service-ready\");\n            isReady = true;\n            for (let i = 0; i < readyCallbacks.length; i++) {\n                readyCallbacks[i]();\n            }\n            readyCallbacks = [];\n            $rootScope.$broadcast('service-ready');\n        };\n\n        return {\n            call: function (method, data, callback) {\n                invoke(method, data, callback);\n            },\n            /**\n             * Service\n             */\n\n            isReady: function () {\n                return isReady;\n            },\n            onReady: function (callback) {\n                if (!isReady)\n                    readyCallbacks.push(callback);\n                else\n                    callback();\n            },\n            /**\n             * User\n             */\n\n            // callback(url)\n            getLoginUrl: function (callback) {\n                invoke(\"getLoginURL\", {}, callback);\n            },\n            isLoggedIn: function () {\n                return ('name' in user);\n            },\n            login: function (code, callback) {\n                let data = {\n                    code: code\n                };\n                invoke(\"login\", data, function (userData) {\n                    user.name = userData;\n                    sessionStorage.user = user;\n                    callback(user);\n                });\n            },\n            logout: function () {\n                sessionStorage.user = \"\";\n                user = {};\n                invoke(\"logout\");\n            },\n            // callback(user)\n            getUser: function (callback) {\n                if (this.isLoggedIn())\n                    // No user in storage\n                    callback(user);\n                else\n                    callback({});\n            },\n            // callback(users)\n            getUsers: function (callback) {\n                invoke(\"getUsers\", {}, callback);\n            },\n            /**\n             * Quiz\n             */\n\n            // callback(quiz)\n            createQuiz: function (name, userIds, playlistId, playlistOwner, nbrOfSongs, generated, callback) {\n                let data = {\n                    name: name,\n                    users: userIds,\n                    playlist: playlistId,\n                    playlistOwner: playlistOwner,\n                    nbrOfSongs: nbrOfSongs,\n                    generated: generated\n                };\n                invoke(\"createQuiz\", data, function (quiz) {\n                    currentQuiz = quiz;\n                    callback(currentQuiz);\n                });\n            },\n            // callback(lists)\n            getPlaylists: function (callback) {\n                invoke(\"getPlaylists\", {}, callback);\n            },\n            // callback(isCorrect)\n            answerQuestion: function (artistName, callback) {\n                let data = {\n                    artistName: artistName\n                };\n                invoke('answerQuestion', data, callback);\n            },\n            // callback(question)\n            getCurrentQuestion: function (callback) {\n                invoke('getCurrentQuestion', {}, callback);\n            },\n            isQuizOwner: function () {\n                return currentQuiz.owner.name === user.name;\n            },\n            // callback(started)\n            isQuizStarted: function (callback) {\n                invoke(\"isQuizStarted\", {}, callback);\n            },\n            // callback(users)\n            getUsersInQuiz: function (callback) {\n                invoke('getUsersInQuiz', {}, callback);\n            },\n            // callback(success)\n            joinQuiz: function (quiz, callback) {\n                let data = {\n                    quizId: quiz.uuid\n                };\n                invoke('joinQuiz', data, function (success) {\n                    if (success)\n                        currentQuiz = quiz;\n                    callback(success);\n                });\n            },\n            // callback(question)\n            nextQuestion: function (callback) {\n                invoke('nextQuestion', {}, callback);\n            },\n            savePlaylist: function () {\n                invoke('savePlaylist');\n            },\n            // callback(users)\n            getResults: function (callback) {\n                invoke('getResults', {}, callback);\n            },\n            // callback(quiz)\n            getQuiz: function (callback) {\n                if (currentQuiz)\n                    callback(currentQuiz);\n                else\n                    invoke(\"getQuiz\", {}, function (quiz) {\n                        currentQuiz = quiz;\n                        callback(quiz);\n                    });\n            },\n            getNumberOfQuestions: function () {\n                return !currentQuiz ? 0 : currentQuiz.questions.length;\n            },\n            /* action: \n             *      userJoined          --> callback(newUser)\n             *      invitedTo           --> callback(quiz)\n             *      newQuestion         --> callback(question)\n             *      gameOver            --> callback(players)\n             *      quizStart           --> callback()\n             *      userPointsUpdate   --> callback(user)\n             */\n            listenTo: function (action, callback) {\n                console.log(\"listenTo(\" + action + \")\");\n                if (!Array.isArray(listenCallbacks[action]))\n                    listenCallbacks[action] = [];\n                listenCallbacks[action].push(callback);\n            }\n        };\n    }]);"]}